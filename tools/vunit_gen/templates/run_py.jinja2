#!/usr/bin/env python3

# Generated run.py from buck2

import os
import sys
from pathlib import Path
from vunit import VUnit

# Here's an ugly hack to force the output path to be up at the repo root
# this is because we are using buck2 run, but not putting the vunit_out/
# folder as an buck2 controlled output so that we easily preserve
# pre-compiled artifacts

def find_project_root():
    current_path = os.getcwd()
    drive_root = os.path.splitdrive(os.path.abspath(current_path))[0] + os.sep
    while True:
        if Path(current_path) == Path(current_path).root:
            #raise NoRootException('No ".buckroot" found for project')
            break

        new_path, tail = os.path.split(current_path)
        root_path = Path(current_path) / ".buckroot"
        if root_path.exists():
            break
        current_path = new_path

    return Path(current_path)


# Now use the ugly hack to set the output_path
output_dir = find_project_root() / 'vunit_out'
if "-o" not in sys.argv:
    sys.argv.append("-o")
    sys.argv.append("{}".format(output_dir))
{% if simulator %}
# Another dirty hack since VUnit only allows simulator specification
# via environment variables, and we don't have a great way of passing
# those in via buck2
os.environ["VUNIT_SIMULATOR"] = "{{simulator}}"
# Our open-source simulators don't support mixed standard simulations
# So we use the reduction provided to get the max standard needed for
# this simulation and make everything use it
os.environ["VUNIT_VHDL_STANDARD"] = "{{vhdl_standard}}"
{% endif %}

vu = VUnit.from_argv()

# For now, add everything here so it's always available
vu.add_vhdl_builtins()
vu.add_com()
vu.add_json4vhdl()
vu.add_osvvm()
vu.add_random()
vu.add_verification_components()
# Create libraries
{% for library in libraries %}
{{library.name}} = vu.add_library("{{library.name}}", vhdl_standard="{{vhdl_standard}}")
{% for file in library.files %}
{{library.name}}.add_source_file("{{file}}", vhdl_standard="{{vhdl_standard}}")
{% endfor %}
{% endfor %}

{% if codec_packages %}
# Generate codecs
{% for pkg in codec_packages %}
{{pkg.types_name}} = lib.package('{{pkg.types_name}}')
{{pkg.types_name}}.generate_codecs(codec_package_name='{{pkg.types_name}}', used_packages=['ieee.std_logic_1164', 'ieee.numeric_std'])
{% endfor %}
{% endif %}

# Disable annoying ieee warnings across VUnit-supported simulators
vu.set_sim_option("disable_ieee_warnings", True)
{% if simulator == "nvc" %}
# Dump arrays of records, may have a perf penalty
vu.set_sim_option("nvc.sim_flags", ["--dump-arrays"])
{% endif %}
# saved here for when we upgrade VUnit
#vu.set_sim_option("nvc.global_flags", ["--ignore-time"])
# Run vunit function
vu.main()
#!/usr/bin/env python3

# Generated run.py from buck2

import os
import sys
from pathlib import Path
from vunit import VUnit

# Here's an ugly hack to force the output path to be up at the repo root
# this is because we are using buck2 run, but not putting the vunit_out/
# folder as an buck2 controlled output so that we easily preserve
# pre-compiled artifacts

def find_project_root():
    current_path = os.getcwd()
    drive_root = os.path.splitdrive(os.path.abspath(current_path))[0] + os.sep
    while True:
        if Path(current_path) == Path(current_path).root:
            #raise NoRootException('No ".buckroot" found for project')
            break

        new_path, tail = os.path.split(current_path)
        root_path = Path(current_path) / ".buckroot"
        if root_path.exists():
            break
        current_path = new_path

    return Path(current_path)


# Now use the ugly hack to set the output_path
output_dir = find_project_root() / 'vunit_out'
# output_dir = Path.cwd() / 'vunit_out'  # buck2-less hack
if "-o" not in sys.argv:
    sys.argv.append("-o")
    sys.argv.append("{}".format(output_dir))
# Another dirty hack since VUnit only allows simulator specification
# via environment variables, and we don't have a great way of passing
# those in via buck2
os.environ["VUNIT_SIMULATOR"] = "nvc"
# Our open-source simulators don't support mixed standard simulations
# So we use the reduction provided to get the max standard needed for
# this simulation and make everything use it
os.environ["VUNIT_VHDL_STANDARD"] = "2019"

vu = VUnit.from_argv(compile_builtins=False)

# For now, add everything here so it's always available
vu.add_vhdl_builtins()
vu.add_com()
vu.add_json4vhdl()
vu.add_osvvm()
vu.add_random()
vu.add_verification_components()
# Create libraries
lib = vu.add_library("lib", vhdl_standard="2019")
lib.add_source_file("./espi_spec_regs_pkg.vhd", vhdl_standard="2019")
lib.add_source_file("./espi_regs_pkg.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/crc/crc8atm_8wide.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/common/utils/calc_pkg.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/fifos/dcfifo_xpm.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/fifos/dcfifo_mixed_xpm.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/axi_blocks/axil_common_pkg.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/axi_blocks/axilite_if_pkg.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/memories/dual_clock_simple_dpr.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/synchronizers/meta_sync.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/uart/base_uart/axi_st_uart.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/uart/fifo_uart/axi_fifo_st_uart.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/espi_spec_regs.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/espi_target_top.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/flash_channel/flash_channel.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/flash_channel/flash_channel_pkg.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/link_layer/dbg_link_faker.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/link_layer/link_layer_top.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/link_layer/qspi_link_layer.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/link_layer/qspi_link_layer_pkg.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/sys_regs/espi_regs.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/txn_layer/command_processor.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/txn_layer/espi_base_types_pkg.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/txn_layer/espi_protocol_pkg.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/txn_layer/response_processor.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/txn_layer/txn_layer_top.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/uart_channel/uart_channel_pkg.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/uart_channel/uart_channel_top.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/vunit_components/qspi_controller/qspi_controller_vc.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/vunit_components/qspi_controller/qspi_vc_pkg.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/sims/espi_tb.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/sims/espi_tb_pkg.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/sims/espi_th.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/sims/models/espi_controller_vc_pkg.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/sims/models/espi_dbg_vc_pkg.vhd", vhdl_standard="2019")
lib.add_source_file("./hdl/ip/vhd/espi/sims/models/fake_flash_txn_mgr.vhd", vhdl_standard="2019")
xpm = vu.add_library("xpm", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_VCOMP.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_cdc/hdl/xpm_cdc_array_single.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_cdc/hdl/xpm_cdc_async_rst.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_cdc/hdl/xpm_cdc_gray.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_cdc/hdl/xpm_cdc_handshake.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_cdc/hdl/xpm_cdc_low_latency_handshake.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_cdc/hdl/xpm_cdc_pulse.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_cdc/hdl/xpm_cdc_single.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_cdc/hdl/xpm_cdc_sync_rst.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_fifo/hdl/xpm_counter_updn.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_fifo/hdl/xpm_fifo_async.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_fifo/hdl/xpm_fifo_axi_reg_slice.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_fifo/hdl/xpm_fifo_axif.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_fifo/hdl/xpm_fifo_axil.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_fifo/hdl/xpm_fifo_axis.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_fifo/hdl/xpm_fifo_base.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_fifo/hdl/xpm_fifo_reg_bit.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_fifo/hdl/xpm_fifo_reg_vec.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_fifo/hdl/xpm_fifo_rst.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_fifo/hdl/xpm_fifo_sync.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_fifo/hdl/xpm_reg_pipe_bit.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_memory/hdl/xpm_memory_base.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_memory/hdl/xpm_memory_dpdistram.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_memory/hdl/xpm_memory_dprom.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_memory/hdl/xpm_memory_sdpram.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_memory/hdl/xpm_memory_spram.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_memory/hdl/xpm_memory_sprom.vhd", vhdl_standard="2019")
xpm.add_source_file("./vnd/xpm/xpm_vhdl/src/xpm/xpm_memory/hdl/xpm_memory_tdpram.vhd", vhdl_standard="2019")


# Disable annoying ieee warnings across VUnit-supported simulators
vu.set_sim_option("disable_ieee_warnings", True)
# Dump arrays of records, may have a perf penalty
vu.set_sim_option("nvc.sim_flags", ["--dump-arrays"])
# saved here for when we upgrade VUnit
#vu.set_sim_option("nvc.global_flags", ["--ignore-time"])
# Run vunit function
vu.main()